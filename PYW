import tkinter as tk
from tkinter import filedialog, messagebox, simpledialog
from PIL import Image, ImageTk, ImageDraw
import os
import tempfile
import time
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service  # Import Service
from webdriver_manager.chrome import ChromeDriverManager

class CircleCropApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Circle Crop App")

        self.canvas = tk.Canvas(master, width=512, height=512)
        self.canvas.pack()

        self.btn_frame = tk.Frame(master)
        self.btn_frame.pack()

        self.load_btn = tk.Button(self.btn_frame, text="Load Image", command=self.load_image)
        self.load_btn.pack(side=tk.LEFT, padx=5, pady=5)

        self.create_css_btn = tk.Button(self.btn_frame, text="Create from CSS/HTML", command=self.create_from_css_html)
        self.create_css_btn.pack(side=tk.LEFT, padx=5, pady=5)

        self.create_gif_btn = tk.Button(self.btn_frame, text="Create GIF from HTML Animation", command=self.create_gif_from_html)
        self.create_gif_btn.pack(side=tk.LEFT, padx=5, pady=5)

        self.circle_crop_btn = tk.Button(self.btn_frame, text="Circle Crop", command=self.circle_crop)
        self.circle_crop_btn.pack(side=tk.LEFT, padx=5, pady=5)

        self.reverse_crop_btn = tk.Button(self.btn_frame, text="Reverse Crop", command=self.reverse_crop)
        self.reverse_crop_btn.pack(side=tk.LEFT, padx=5, pady=5)

        self.add_css_btn = tk.Button(self.btn_frame, text="Add CSS Overlay", command=self.add_css)
        self.add_css_btn.pack(side=tk.LEFT, padx=5, pady=5)

        self.save_btn = tk.Button(self.btn_frame, text="Save Image/GIF", command=self.save_image)
        self.save_btn.pack(side=tk.LEFT, padx=5, pady=5)

        self.image = None
        self.processed_image = None
        self.filename = None
        self.css_image = None
        self.frames = []  # For GIF frames
        self.is_gif = False
        self.gif_duration = 0  # Total duration in milliseconds

    def load_image(self):
        file_path = filedialog.askopenfilename(title="Select an Image")
        if file_path:
            self.filename = os.path.basename(file_path)
            img = Image.open(file_path).convert("RGBA")
            img = img.resize((512, 512), Image.LANCZOS)
            self.image = img
            self.processed_image = img
            self.css_image = None  # Reset CSS image
            self.is_gif = False
            self.frames = []
            self.display_image(img)

    def create_from_css_html(self):
        # Prompt user to enter CSS or HTML code
        code = simpledialog.askstring("Input CSS/HTML", "Enter your CSS or HTML code:")
        if code:
            # Check if the code contains HTML tags
            if "<" in code and ">" in code:
                # Assume it's HTML code
                html_content = code
            else:
                # Assume it's CSS code, wrap it in HTML
                html_content = f"""
                <html>
                <head>
                    <style>
                        body, html {{
                            margin: 0;
                            padding: 0;
                            width: 512px;
                            height: 512px;
                        }}
                        #content {{
                            width: 512px;
                            height: 512px;
                            {code}
                        }}
                    </style>
                </head>
                <body>
                    <div id="content"></div>
                </body>
                </html>
                """
            # Use Selenium to render the HTML/CSS and capture a screenshot
            img = self.render_html_to_image(html_content)
            if img:
                self.filename = "created_image.png"
                self.image = img
                self.processed_image = img
                self.css_image = None  # Reset CSS image
                self.is_gif = False
                self.frames = []
                self.display_image(img)
            else:
                messagebox.showerror("Error", "Failed to render the HTML/CSS content.")
        else:
            messagebox.showwarning("No Code Entered", "No CSS or HTML code was entered.")

    def create_gif_from_html(self):
        # Prompt user to enter HTML code with animation
        html_code = simpledialog.askstring("Input HTML", "Enter your HTML code with animations:")
        if html_code:
            # Prompt for duration and frame rate
            duration = simpledialog.askfloat("Duration", "Enter the duration of the animation in seconds:", minvalue=0.1)
            if duration is None:
                return
            fps = simpledialog.askinteger("FPS", "Enter the frames per second (FPS):", minvalue=1)
            if fps is None:
                return

            total_frames = int(duration * fps)
            interval = 1 / fps

            # Use Selenium to render the HTML/CSS and capture frames over time
            options = Options()
            options.add_argument('--headless')
            options.add_argument('--disable-gpu')
            options.add_argument(f'--window-size=512,512')
            options.add_argument('--hide-scrollbars')

            service = Service(executable_path=ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=options)

            # Save HTML to a temporary file
            temp_html = os.path.join(tempfile.gettempdir(), 'temp_animation.html')
            with open(temp_html, 'w', encoding='utf-8') as f:
                f.write(html_code)

            driver.get('file://' + temp_html)

            # Wait for the page to load completely
            time.sleep(2)

            self.frames = []
            temp_dir = tempfile.gettempdir()
            try:
                start_time = time.perf_counter()
                for frame_number in range(total_frames):
                    elapsed = time.perf_counter() - start_time
                    # Capture screenshot
                    temp_png = os.path.join(temp_dir, f'frame_{frame_number}.png')
                    driver.save_screenshot(temp_png)
                    # Open image and append to frames
                    frame_image = Image.open(temp_png).convert('RGBA')
                    frame_image = frame_image.resize((512, 512), Image.LANCZOS)
                    self.frames.append(frame_image)
                    # Update preview with the latest frame
                    self.display_image(frame_image)
                    self.master.update()
                    # Wait until the next frame should be captured
                    while (time.perf_counter() - start_time) < ((frame_number + 1) * interval):
                        time.sleep(0.001)
            finally:
                driver.quit()

            if self.frames:
                self.processed_image = self.frames[0]
                self.is_gif = True
                self.filename = "animation.gif"
                self.gif_duration = duration * 1000  # Total duration in milliseconds
            else:
                messagebox.showerror("Error", "Failed to capture animation frames.")
        else:
            messagebox.showwarning("No Code Entered", "No HTML code was entered.")

    def render_html_to_image(self, html_content):
        # Use Selenium to render the HTML content and capture a screenshot
        options = Options()
        options.add_argument('--headless')
        options.add_argument('--disable-gpu')
        options.add_argument(f'--window-size=512,512')
        options.add_argument('--hide-scrollbars')

        service = Service(executable_path=ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)

        # Save HTML to a temporary file
        temp_html = os.path.join(tempfile.gettempdir(), 'temp.html')
        with open(temp_html, 'w', encoding='utf-8') as f:
            f.write(html_content)

        driver.get('file://' + temp_html)
        # Wait for the page to load
        time.sleep(2)
        temp_png = os.path.join(tempfile.gettempdir(), 'temp.png')
        driver.save_screenshot(temp_png)
        driver.quit()
        # Open the screenshot
        img = Image.open(temp_png).convert("RGBA")
        img = img.resize((512, 512), Image.LANCZOS)
        return img

    def display_image(self, img):
        self.tk_image = ImageTk.PhotoImage(img)
        self.canvas.delete("all")  # Clear previous images
        self.canvas.create_image(256, 256, image=self.tk_image)

    def circle_crop(self):
        if self.processed_image:
            mask = Image.new('L', (512, 512), 0)
            draw = ImageDraw.Draw(mask)
            draw.ellipse((0, 0, 512, 512), fill=255)
            if self.is_gif and self.frames:
                new_frames = []
                for frame in self.frames:
                    result = Image.new('RGBA', (512, 512))
                    result.paste(frame, (0, 0), mask)
                    new_frames.append(result)
                self.frames = new_frames
                self.processed_image = self.frames[0]
            else:
                result = Image.new('RGBA', (512, 512))
                result.paste(self.processed_image, (0, 0), mask)
                self.processed_image = result
            self.css_image = None  # Reset CSS image
            self.display_image(self.processed_image)
        else:
            messagebox.showwarning("No Image", "Please load or create an image first.")

    def reverse_crop(self):
        if self.processed_image:
            mask = Image.new('L', (512, 512), 255)
            draw = ImageDraw.Draw(mask)
            draw.ellipse((0, 0, 512, 512), fill=0)
            if self.is_gif and self.frames:
                new_frames = []
                for frame in self.frames:
                    result = Image.new('RGBA', (512, 512))
                    result.paste(frame, (0, 0), mask)
                    new_frames.append(result)
                self.frames = new_frames
                self.processed_image = self.frames[0]
            else:
                result = Image.new('RGBA', (512, 512))
                result.paste(self.processed_image, (0, 0), mask)
                self.processed_image = result
            self.css_image = None  # Reset CSS image
            self.display_image(self.processed_image)
        else:
            messagebox.showwarning("No Image", "Please load or create an image first.")

    def add_css(self):
        if self.processed_image:
            # Prompt user to enter CSS code
            css_code = simpledialog.askstring("Input CSS", "Enter your CSS code for overlay:")
            if css_code:
                # Generate HTML content with the CSS code applied to a div
                html_content = f"""
                <html>
                <head>
                    <style>
                        body, html {{
                            margin: 0;
                            padding: 0;
                            width: 512px;
                            height: 512px;
                        }}
                        #css-content {{
                            width: 512px;
                            height: 512px;
                            {css_code}
                        }}
                    </style>
                </head>
                <body>
                    <div id="css-content"></div>
                </body>
                </html>
                """
                # Render the overlay image
                overlay_img = self.render_html_to_image(html_content)
                if overlay_img:
                    if self.is_gif and self.frames:
                        new_frames = []
                        for frame in self.frames:
                            combined = frame.copy()
                            combined.paste(overlay_img, (0, 0), overlay_img)
                            new_frames.append(combined)
                        self.frames = new_frames
                        self.processed_image = self.frames[0]
                    else:
                        combined = self.processed_image.copy()
                        combined.paste(overlay_img, (0, 0), overlay_img)
                        self.processed_image = combined
                    self.css_image = overlay_img  # Save CSS image for saving
                    self.display_image(self.processed_image)
                else:
                    messagebox.showerror("Error", "Failed to render CSS overlay.")
            else:
                messagebox.showwarning("No CSS Code", "No CSS code was entered.")
        else:
            messagebox.showwarning("No Image", "Please load or create an image first.")

    def save_image(self):
        if self.processed_image:
            # Open a "Save As" dialog
            if self.is_gif:
                default_ext = ".gif"
                filetypes = [("GIF files", "*.gif")]
                initial_filename = os.path.splitext(self.filename)[0] + "-1.gif" if self.filename else "untitled-1.gif"
            else:
                default_ext = ".png"
                filetypes = [("PNG files", "*.png")]
                initial_filename = os.path.splitext(self.filename)[0] + "-1.png" if self.filename else "untitled-1.png"

            file_path = filedialog.asksaveasfilename(
                defaultextension=default_ext,
                filetypes=filetypes,
                initialfile=initial_filename,
                title="Save Image As"
            )
            if file_path:
                if self.is_gif and self.frames:
                    # Calculate frame duration in milliseconds
                    frame_duration = self.gif_duration / len(self.frames)
                    # Save frames as GIF
                    self.frames[0].save(
                        file_path,
                        save_all=True,
                        append_images=self.frames[1:],
                        duration=frame_duration,
                        loop=0,
                        disposal=2
                    )
                else:
                    self.processed_image.save(file_path, 'PNG')
                messagebox.showinfo("Image Saved", f"Image saved to {file_path}")
            else:
                messagebox.showwarning("Save Cancelled", "The save operation was cancelled.")
        else:
            messagebox.showwarning("No Image", "There is no image to save.")

if __name__ == "__main__":
    root = tk.Tk()
    app = CircleCropApp(root)
    root.mainloop()
